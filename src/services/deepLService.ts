import { getApiKey } from '../config/apiKeys';
import LoggingService from './loggingService';

interface DeepLLanguage {
  language: string;
  name: string;
  supports_formality?: boolean;
}

interface DeepLTranslationResponse {
  translations: Array<{
    detected_source_language: string;
    text: string;
  }>;
}

interface DeepLUsageResponse {
  character_count: number;
  character_limit: number;
}

class DeepLService {
  private apiKey: string;
  private baseUrl: string;
  private supportedLanguages: Map<string, DeepLLanguage> = new Map();
  private logger = LoggingService.getInstance();

  constructor() {
    this.apiKey = getApiKey('DEEPL_API_KEY');
    this.baseUrl = getApiKey('DEEPL_API_URL') || 'https://api-free.deepl.com/v2';
    
    if (!this.apiKey) {
      throw new Error('DEEPL_API_KEY is required. Please configure your environment variables.');
    }
    
    this.logger.configure({ contextPrefix: 'DeepLService' });
  }

  async initializeLanguages(): Promise<void> {
    try {
      const [sourceLanguages, targetLanguages] = await Promise.all([
        this.getSourceLanguages(),
        this.getTargetLanguages()
      ]);

      const allLanguages = new Map<string, DeepLLanguage>();
      
      sourceLanguages.forEach(lang => {
        allLanguages.set(lang.language, lang);
      });
      
      targetLanguages.forEach(lang => {
        if (allLanguages.has(lang.language)) {
          const existing = allLanguages.get(lang.language)!;
          allLanguages.set(lang.language, { ...existing, ...lang });
        } else {
          allLanguages.set(lang.language, lang);
        }
      });

      this.supportedLanguages = allLanguages;
      this.logger.info(`DeepL API initialized successfully. ${allLanguages.size} languages available.`);
    } catch (error) {
      this.logger.error('Failed to initialize DeepL languages', 'initialization', error);
      throw new Error('DeepL API initialization failed. Please check your API key and network connection.');
    }
  }

  async getSourceLanguages(): Promise<DeepLLanguage[]> {
    const response = await fetch(`${this.baseUrl}/languages?type=source`, {
      headers: {
        'Authorization': `DeepL-Auth-Key ${this.apiKey}`,
        'Content-Type': 'application/json',
      },
      signal: AbortSignal.timeout(10000),
    });

    if (!response.ok) {
      throw new Error(`DeepL API error: ${response.status} ${response.statusText}`);
    }

    return await response.json();
  }

  async getTargetLanguages(): Promise<DeepLLanguage[]> {
    const response = await fetch(`${this.baseUrl}/languages?type=target`, {
      headers: {
        'Authorization': `DeepL-Auth-Key ${this.apiKey}`,
        'Content-Type': 'application/json',
      },
      signal: AbortSignal.timeout(10000),
    });

    if (!response.ok) {
      throw new Error(`DeepL API error: ${response.status} ${response.statusText}`);
    }

    return await response.json();
  }

  async translateText(text: string, targetLanguage: string, sourceLanguage?: string) {
    if (!text.trim()) {
      throw new Error('Text to translate cannot be empty');
    }

    if (!targetLanguage) {
      throw new Error('Target language is required');
    }

    try {
      const formData = new FormData();
      formData.append('text', text.trim());
      formData.append('target_lang', this.normalizeLanguageCode(targetLanguage));
      
      if (sourceLanguage) {
        formData.append('source_lang', this.normalizeLanguageCode(sourceLanguage));
      }

      formData.append('preserve_formatting', '1');
      formData.append('formality', 'default');

      const response = await fetch(`${this.baseUrl}/translate`, {
        method: 'POST',
        headers: {
          'Authorization': `DeepL-Auth-Key ${this.apiKey}`,
        },
        body: formData,
        signal: AbortSignal.timeout(15000),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`DeepL translation error: ${response.status} - ${errorText}`);
      }

      const data: DeepLTranslationResponse = await response.json();

      if (!data.translations || data.translations.length === 0) {
        throw new Error('No translation received from DeepL');
      }

      const translation = data.translations[0];
      
      this.logger.info(`Translation completed: ${text.substring(0, 50)}... -> ${translation.text.substring(0, 50)}...`);

      return {
        translatedText: translation.text,
        detectedSourceLanguage: translation.detected_source_language,
      };
    } catch (error) {
      this.logger.error('Translation failed', 'translateText', { text: text.substring(0, 100), targetLanguage, error });
      throw new Error(`Translation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  async getUsageInfo(): Promise<DeepLUsageResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/usage`, {
        headers: {
          'Authorization': `DeepL-Auth-Key ${this.apiKey}`,
        },
        signal: AbortSignal.timeout(10000),
      });

      if (!response.ok) {
        throw new Error(`DeepL API error: ${response.status} ${response.statusText}`);
      }

      return await response.json();
    } catch (error) {
      this.logger.error('Failed to fetch usage info', 'getUsageInfo', error);
      throw new Error('Failed to fetch DeepL usage information');
    }
  }

  getSupportedLanguages(): Array<{ code: string; name: string; flag: string }> {
    if (this.supportedLanguages.size === 0) {
      this.logger.warn('No languages loaded from API, using fallback list');
      return this.getFallbackLanguages();
    }

    const languageFlags: { [key: string]: string } = {
      'EN': 'üá∫üá∏', 'ES': 'üá™üá∏', 'FR': 'üá´üá∑', 'DE': 'üá©üá™', 'IT': 'üáÆüáπ',
      'PT': 'üáßüá∑', 'RU': 'üá∑üá∫', 'JA': 'üáØüáµ', 'KO': 'üá∞üá∑', 'ZH': 'üá®üá≥',
      'AR': 'üá∏üá¶', 'HI': 'üáÆüá≥', 'NL': 'üá≥üá±', 'PL': 'üáµüá±', 'SV': 'üá∏üá™',
      'DA': 'üá©üá∞', 'FI': 'üá´üáÆ', 'NO': 'üá≥üá¥', 'CS': 'üá®üáø', 'HU': 'üá≠üá∫',
      'RO': 'üá∑üá¥', 'SK': 'üá∏üá∞', 'SL': 'üá∏üáÆ', 'BG': 'üáßüá¨', 'ET': 'üá™üá™',
      'LV': 'üá±üáª', 'LT': 'üá±üáπ', 'UK': 'üá∫üá¶', 'TR': 'üáπüá∑', 'EL': 'üá¨üá∑',
      'ID': 'üáÆüá©', 'MS': 'üá≤üáæ', 'TH': 'üáπüá≠', 'VI': 'üáªüá≥',
    };

    return Array.from(this.supportedLanguages.values()).map(lang => ({
      code: lang.language,
      name: lang.name,
      flag: languageFlags[lang.language] || 'üåê',
    }));
  }

  private getFallbackLanguages(): Array<{ code: string; name: string; flag: string }> {
    return [
      { code: 'EN', name: 'English', flag: 'üá∫üá∏' },
      { code: 'ES', name: 'Spanish', flag: 'üá™üá∏' },
      { code: 'FR', name: 'French', flag: 'üá´üá∑' },
      { code: 'DE', name: 'German', flag: 'üá©üá™' },
      { code: 'IT', name: 'Italian', flag: 'üáÆüáπ' },
      { code: 'PT', name: 'Portuguese', flag: 'üáßüá∑' },
      { code: 'RU', name: 'Russian', flag: 'üá∑üá∫' },
      { code: 'JA', name: 'Japanese', flag: 'üáØüáµ' },
      { code: 'KO', name: 'Korean', flag: 'üá∞üá∑' },
      { code: 'ZH', name: 'Chinese', flag: 'üá®üá≥' },
      { code: 'AR', name: 'Arabic', flag: 'üá∏üá¶' },
      { code: 'HI', name: 'Hindi', flag: 'üáÆüá≥' },
      { code: 'NL', name: 'Dutch', flag: 'üá≥üá±' },
      { code: 'PL', name: 'Polish', flag: 'üáµüá±' },
      { code: 'SV', name: 'Swedish', flag: 'üá∏üá™' },
      { code: 'DA', name: 'Danish', flag: 'üá©üá∞' },
      { code: 'FI', name: 'Finnish', flag: 'üá´üáÆ' },
      { code: 'NO', name: 'Norwegian', flag: 'üá≥üá¥' },
      { code: 'CS', name: 'Czech', flag: 'üá®üáø' },
      { code: 'HU', name: 'Hungarian', flag: 'üá≠üá∫' },
      { code: 'RO', name: 'Romanian', flag: 'üá∑üá¥' },
      { code: 'SK', name: 'Slovak', flag: 'üá∏üá∞' },
      { code: 'SL', name: 'Slovenian', flag: 'üá∏üáÆ' },
      { code: 'BG', name: 'Bulgarian', flag: 'üáßüá¨' },
      { code: 'ET', name: 'Estonian', flag: 'üá™üá™' },
      { code: 'LV', name: 'Latvian', flag: 'üá±üáª' },
      { code: 'LT', name: 'Lithuanian', flag: 'üá±üáπ' },
      { code: 'UK', name: 'Ukrainian', flag: 'üá∫üá¶' },
      { code: 'TR', name: 'Turkish', flag: 'üáπüá∑' },
      { code: 'EL', name: 'Greek', flag: 'üá¨üá∑' },
      { code: 'ID', name: 'Indonesian', flag: 'üáÆüá©' },
      { code: 'MS', name: 'Malay', flag: 'üá≤üáæ' },
      { code: 'TH', name: 'Thai', flag: 'üáπüá≠' },
      { code: 'VI', name: 'Vietnamese', flag: 'üáªüá≥' }
    ];
  }

  private normalizeLanguageCode(language: string): string {
    const languageMap: { [key: string]: string } = {
      'English': 'EN', 'Spanish': 'ES', 'French': 'FR', 'German': 'DE',
      'Italian': 'IT', 'Portuguese': 'PT', 'Russian': 'RU', 'Japanese': 'JA',
      'Korean': 'KO', 'Chinese': 'ZH', 'Arabic': 'AR', 'Hindi': 'HI',
      'Dutch': 'NL', 'Polish': 'PL', 'Swedish': 'SV', 'Danish': 'DA',
      'Finnish': 'FI', 'Norwegian': 'NO', 'Czech': 'CS', 'Hungarian': 'HU',
      'Romanian': 'RO', 'Slovak': 'SK', 'Slovenian': 'SL', 'Bulgarian': 'BG',
      'Estonian': 'ET', 'Latvian': 'LV', 'Lithuanian': 'LT', 'Ukrainian': 'UK',
      'Turkish': 'TR', 'Greek': 'EL', 'Indonesian': 'ID', 'Malay': 'MS',
      'Thai': 'TH', 'Vietnamese': 'VI',
    };

    return languageMap[language] || language.toUpperCase();
  }

  isLanguageSupported(languageCode: string): boolean {
    return this.supportedLanguages.has(this.normalizeLanguageCode(languageCode));
  }

  getApiStatus(): { available: boolean; message: string } {
    return {
      available: !!this.apiKey && this.supportedLanguages.size > 0,
      message: `DeepL API ready with ${this.supportedLanguages.size} languages`,
    };
  }
}

export default DeepLService;